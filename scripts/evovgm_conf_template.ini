[io]
# output_path is used to save training data, scores and figures
output_path = ../results/CoV

# If False the program runs the evaluation and save resutls in
# output_path,else the program loads the results directly from the
# file (if it exists)
scores_from_file = True

[data]
# Use validation data along fitting and for generating step
validation = True

# If sim_data = True: evolve new sequences
# else: fetch sequences from fasta_fit_file [and fasta_val_file]
sim_data = False

# If sim_from_fasta and sim_data are True, the data will be
# extracted from simulated FASTA files if they already exist,
# else: new alignment will be simulated
sim_from_fasta = True

# To use your FASTA files (real data for example), put sim_data
# to False and specify the path of FASTA files
fasta_fit_file = ../example_data/CoV/Cov_gene_S_Gblocks_Cleaned_6seqs.fasta

# If validation is True, specify the path of validation FASTA file.
# if not specified (or False), fasta_fit_file will be used as 
# validation FASTA file
fasta_val_file = False
alignment_size = 100

## Evo parameters
## ##############
## IF sim_data is True, evoVGM.py will use these parameters 
## to simulate sequence alignments for fit and validation
## ELSE evoVGM.py will use them for comparison with
## its infered parameters
#
# Branch lengths is list of M floats separated by comma (w/out space)
# (M is the number of sequences to be evolved)
branch_lengths = 0.03027,0.349819,0.164930,0.147524,0.33715,0.04247
# Substitution rates
#        AG     AC      AT   GC     GT     CT
#rates = 0.160, 0.16, 0.160, 0.160, 0.160, 0.160
rates = 0.225, 0.106, 0.164, 0.064, 0.070, 0.369
#rates = 0.16
# Relative frequencies
#        A     C      G      T
freqs = 0.288, 0.200, 0.190, 0.326
# freqs = 0.25

[vb_model]
# jc69 := EvoVGM_JC69: infer a and b latent variables
# k80  := EvoVGM_K80 : infer a, b, k latent variables
# gtr  := EvoVGM_GTR : infer a, b, r, f latent variables
evomodel = gtr

[hyperparams]
nb_replicates = 2
alpha_kl = 0.1
nb_samples = 100
hidden_size = 32
nb_layers = 3
sample_temp = 0.1
n_epochs = 100
# optimizer type : adam | sgd
optim=adam
learning_rate = 0.005
optim_weight_decay = 0.00001

[priors]
# Hyper-paramters of prior densities
# Accepted values for catgorical variables: uniform | 0.2,0.4,0.2,0.2
# To implement empirical
ancestor_prior_hp = uniform
rates_prior_hp = uniform
freqs_prior_hp = uniform
# accepted values for branch prior: 2 float values separated by
# comma (w/out space)
# mu and sigma
branch_prior_hp = 0.01,1.
kappa_prior_hp = 1.,1.

[settings]
# Name of the job. If 'auto', the program
# generates automatically a name from timestamp
#job_name = auto
job_name = 2207141659
# cpu | cuda | cuda:0
device = cpu
seed = 14
# Valid values for verbose: True, False, None and positive integers 
verbose = 1
compress_files = False

[plotting]
# To render Tex text in plots, Matplotlib requires
# Latex, dvipng, Ghostscript and type1ec.sty found in cm-super
# If Latex and other required packages are not installed,put to False
plt_usetex = False
size_font = 16
print_xtick_every = 500
make_logos = True
